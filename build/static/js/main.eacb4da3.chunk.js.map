{"version":3,"sources":["component/auth/log.js","component/auth/reg.js","component/auth/auth.js","component/chat/header.js","redux/action-creators/actions-create.js","redux/actions/actions.js","component/chat/chat.item.js","component/chat/chatsBar.js","component/chat/Massage-item.js","component/chat/massageBar.js","component/chat/chat.js","redux/reducer/reducer.js","App.js","serviceWorker.js","index.js"],"names":["Login","useState","login","setLogin","password","setPassword","auth","setAuth","change","e","document","getElementById","massage","target","id","value","classList","innerText","className","type","onChange","from","to","onClick","preventDefault","obj","fetch","method","body","JSON","stringify","headers","then","responce","json","mass","console","log","result","style","border","Register","Auth","path","component","Header","saveMassages","content","connect","state","user","carrentUser","User","users","filter","elem","slice","_id","massages","length","mapDispatchToProps","masssages","serchingUser","setSearching","search","querySelector","credentials","map","arr","key","classes","chatId","window","location","href","massageArr","React","massageUser","setMassageUser","getMassage","useEffect","setInterval","initialState","Reducer","action","store","createStore","App","Chat","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eacb4da3.chunk.js","sourcesContent":["import React, {useState} from \"react\"\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nfunction Login(){\r\n    let [login,setLogin]=useState('');\r\n    let [password,setPassword]=useState('');\r\n    let [auth,setAuth]= useState(false)\r\n    function change(e){\r\n        let login = document.getElementById(\"login\");\r\n        let password = document.getElementById(\"password\");\r\n        let massage = document.getElementById(\"massage\"); \r\n        if(e.target.id ===\"login\"){\r\n            setLogin(e.target.value)\r\n        }else setPassword(e.target.value)\r\n        login.classList=\"\"\r\n        password.classList=\"\";\r\n        massage.innerText =\"\";\r\n        massage.classList=\"\"\r\n        \r\n    }\r\n    function sub(e){\r\n        e.preventDefault()\r\n        let obj = {\r\n            login,password\r\n        }\r\n        fetch(\"http://localhost:9000/login\",{\r\n            method:\"POST\",\r\n            body:JSON.stringify(obj),\r\n            headers:{\r\n                \"Content-type\":\"Application/json\"\r\n            }\r\n        }).then(responce=>responce.json())\r\n        .then(mass=>{\r\n            console.log(mass);\r\n            let login = document.getElementById(\"login\");\r\n            let password = document.getElementById(\"password\");\r\n            let massage = document.getElementById(\"massage\"); \r\n            massage.innerText = mass.result \r\n            if(mass.auth){\r\n                setAuth(true)\r\n            }          \r\n            else{\r\n                login.classList = \"wrong\";\r\n                password.classList = \"wrong\"               \r\n                massage.classList = 'wrong'\r\n                massage.style.border = \"none\"\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"form\">\r\n            <form>\r\n                <p>Логин</p><input id=\"login\" type=\"text\" value={login} onChange={change}/>\r\n                <p>Пороль</p><input id=\"password\"  type=\"text\" value={password} onChange={change}/>\r\n                <br></br>\r\n                {auth?<Redirect from=\"/auth/login\" to=\"/chat\"/>:<p id=\"massage\"></p>} \r\n                <br></br>\r\n                <button className=\"btn btn-success\" onClick={sub}>Войти</button>\r\n            </form>\r\n            </div>            \r\n        </div>\r\n    )\r\n}\r\nexport default Login","import React,{useState} from \"react\"\r\n\r\nfunction Register(){\r\n    let [login,setLogin]=useState('');\r\n    let [password,setPassword]=useState('');\r\n\r\n    function sub(e){\r\n        e.preventDefault()\r\n        let obj = {\r\n            login,password\r\n        }        \r\n        fetch(\"http://localhost:9000/register\",{\r\n            method:\"POST\",\r\n            body:JSON.stringify(obj),\r\n            headers:{\r\n                \"Content-type\":\"Application/json\"\r\n            }\r\n        }).then(responce=>responce.json())\r\n        .then(mass=>{\r\n            console.log(mass);\r\n            let login = document.getElementById(\"login\");\r\n            let massage = document.getElementById(\"massage\"); \r\n            massage.innerText = mass.massage           \r\n            if(!mass.result){\r\n                login.classList = \"wrong\";               \r\n                massage.classList = 'wrong'\r\n                massage.style.border = \"none\"\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"form\">\r\n            <form>\r\n                <p>Логин</p><input id=\"login\" type=\"text\" value={login} onChange={(e)=>{\r\n                    let login = document.getElementById(\"login\");\r\n                    let massage = document.getElementById(\"massage\"); \r\n                    login.classList =\"\"\r\n                    massage.classList=\"\"\r\n                    massage.innerText=\"\"\r\n                    setLogin(e.target.value)\r\n                    }}/>\r\n                <p>Пороль</p><input  type=\"text\" value={password} onChange={(e)=>setPassword(e.target.value)}/>\r\n                <br></br> \r\n                <p id=\"massage\"></p>\r\n                <br></br>\r\n                <button className=\"btn btn-success\" onClick={sub}>Зарегистрироваться</button>\r\n            </form>\r\n            </div>            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Register","import React from \"react\";\r\nimport {Switch,Route, Link} from \"react-router-dom\"\r\nimport Login from \"./log\";\r\nimport Register from \"./reg\";\r\n\r\nfunction Auth(){\r\n    return (\r\n        <div className=\"Auth\">\r\n            <ul className=\"nav\">\r\n                <li ><Link className=\"nav-item\" to=\"/auth/login\">Логин</Link></li>\r\n                <li ><Link  className=\"nav-item\" to=\"/register\">Регистрация</Link></li>                \r\n            </ul>\r\n            <Switch>\r\n                <Route path=\"/auth/login\" component={Login}></Route>\r\n                <Route path=\"/auth/register\" component={Register}></Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth","import React from \"react\";\r\n\r\nfunction Header(){\r\n    return(\r\n        <div className=\"header\">\r\n            Massanger\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import { ALL_MASSAGE } from \"../actions/actions\";\r\n\r\n\r\nexport const saveMassages = function (content){\r\n    return {\r\n        type:ALL_MASSAGE,\r\n        content\r\n    }\r\n}","export const NEW_MASSAGE = \"NEW_MASSAGE\"\r\nexport const ALL_MASSAGE = \"ALL_MASSAGE\"","import React from \"react\"\r\nimport { connect } from \"react-redux\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\n\r\nfunction ChatItem({massage,user}){\r\n    let User = massage.users.filter(elem=>elem!==user)\r\n    return (\r\n        <div className=\"chatItem\">\r\n            <div className=\"avatar\">{User[0].slice(0,2)}</div>\r\n            <Link to={\"/chat/\"+massage._id}><p className=\"chatItem-massage\">{massage.massages.length?massage.massages[massage.massages.length-1].massage:\"Пока нету сообщений...\"}</p></Link>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state=>{\r\n    return{user:state.carrentUser}\r\n}\r\nexport default connect(mapStateToProps)(ChatItem) ","import React,{useState} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {saveMassages} from \"../../redux/action-creators/actions-create\"\r\nimport ChatItem from \"./chat.item\";\r\n\r\nfunction ChatsBar({masssages,saveMassages}){    \r\n    let [serchingUser,setSearching] = useState('');    \r\n    function newChat(){\r\n        let obj = {\r\n            login:serchingUser\r\n        }\r\n        fetch(\"http://localhost:9000/newChat\",{\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            body:JSON.stringify(obj),\r\n            headers:{\r\n                \"Content-type\":\"application/json\"\r\n            }\r\n        }).then(responce=>responce.json())\r\n        .then(responce=>{\r\n            console.log(responce);\r\n            if(!responce.result){\r\n                let search = document.querySelector(\"#search\");\r\n                search.classList = \"wrong\";\r\n                let massage = document.getElementById(\"massage\"); \r\n                massage.classList=\"wrong\"\r\n                massage.style.border =\"none\"\r\n                massage.innerText = responce.massage   \r\n            }else saveMassages(responce)\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"chatsBar\">\r\n            <div className=\"newChat\">\r\n                <input id=\"search\" className=\"searchUser\" type=\"text\" value={serchingUser} onChange={(e)=>{\r\n                   let search = document.querySelector(\"#search\");\r\n                    let massage = document.getElementById(\"massage\"); \r\n                    search.classList =\"\"\r\n                    massage.classList=\"\"\r\n                    massage.innerText=\"\"\r\n                    setSearching(e.target.value)}\r\n                    } />\r\n                <button onClick={newChat} className=\"newChat-button\">+</button>\r\n                <p id=\"massage\"></p>\r\n            </div>\r\n            <div className=\"chat-item-content\">\r\n                {masssages.obj.map((arr,id)=>{\r\n                    return(<ChatItem key={id} massage={arr}></ChatItem>) \r\n                })}\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\nconst mapDispatchToProps = {\r\n    saveMassages\r\n}\r\nconst mapStateToProps = state=>{\r\n    return {\r\n        masssages:state\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChatsBar) ","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction MassageItem({massage,carrentUser}){\r\n    console.log(massage);\r\n    console.log(carrentUser);\r\n    const poss = carrentUser===massage.user?\"right\":\"left\"\r\n    const classes =\"massage-item \" +poss    \r\n\r\n    return(\r\n        carrentUser===massage.user?<div className={classes}>\r\n            <p className=\"massage-item-content\">{massage.massage}</p><div className=\"avatar\">{massage.user.slice(0,2)}</div>\r\n        </div>:<div className={classes}>\r\n        <div className=\"avatar\">{massage.user.slice(0,2)}</div><p className=\"massage-item-left\">{massage.massage}</p>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state=>{\r\n    return {\r\n        carrentUser:state.carrentUser\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(MassageItem) \r\n\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\";\r\nimport {saveMassages} from \"../../redux/action-creators/actions-create\"\r\nimport MassageItem from \"./Massage-item\";\r\n\r\n\r\n\r\n\r\nfunction MassageBar({massageArr,saveMassages}){  \r\n    let [massageUser, setMassageUser] = React.useState(\"\");\r\n    function newMassage(){\r\n        setMassageUser(\"\")\r\n        if(massageArr){\r\n            return\r\n        }\r\n        const obj = {\r\n            _id:massageArr._id,\r\n            massage:massageUser\r\n        }\r\n        fetch(\"http://localhost:9000/newMassage\",{\r\n        method: 'POST',\r\n        credentials: 'include',\r\n        body:JSON.stringify(obj),\r\n        headers:{\r\n            \"Content-type\":\"application/json\"\r\n        }})\r\n        .then(responce=>responce.json())\r\n        .then(responce=>{\r\n            saveMassages(responce)\r\n        })\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <div className=\"massage-content\">\r\n                {massageArr?massageArr.massages.map((elem,id)=>{\r\n                    return (<MassageItem massage={elem} key={id}></MassageItem>)\r\n                }):'Пока нету сообщений...'}                      \r\n            </div>\r\n            <div className=\"massage\">\r\n                <div className=\"massage-input\">\r\n                    <input type=\"text\" value={massageUser} onChange={(e)=>{setMassageUser(e.target.value)}}></input>\r\n                    <button onClick={newMassage} type=\"button\" className=\"btn btn-success button\">Отправить</button>            \r\n                </div>\r\n            </div> \r\n        </div> \r\n    )\r\n}\r\n\r\nconst mapStateToProps = state=>{\r\n    const chatId = window.location.href.slice(27,window.location.href.length);\r\n    let arr = state.obj.filter(elem=>{\r\n        if(elem._id === chatId){\r\n            return true\r\n        }else return false\r\n       \r\n    })\r\n    return {\r\n        massageArr:arr[0]  \r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    saveMassages\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(MassageBar) ","import React, { useEffect } from \"react\";\r\nimport Header from \"./header\";\r\nimport ChatsBar from \"./chatsBar\";\r\nimport { connect } from \"react-redux\";\r\nimport {saveMassages} from \"../../redux/action-creators/actions-create\"\r\nimport MassageBar from \"./massageBar\";\r\n\r\nfunction Chat({saveMassages}){ \r\n    function getMassage(){        \r\n        fetch(\"http://localhost:9000/getAllMassage\",{\r\n            method: 'GET',\r\n            credentials: 'include'\r\n        })\r\n        .then(responce=>responce.json())\r\n        .then(responce=>{\r\n            if(!responce.result)saveMassages(responce)\r\n        })\r\n        \r\n    }\r\n    useEffect(getMassage)\r\n    setInterval(getMassage,10000)\r\n    return(\r\n        <div className=\"chat\">\r\n            <Header></Header>\r\n            <ChatsBar></ChatsBar>\r\n            <MassageBar></MassageBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps={\r\n    saveMassages\r\n}\r\nexport default connect(null,mapDispatchToProps)(Chat) ","import { ALL_MASSAGE } from \"../actions/actions\"\r\n\r\nconst initialState = {\r\n    obj:[],\r\n    carrentUser:''\r\n}\r\n\r\nfunction Reducer(state=initialState,action){\r\n    switch(action.type){\r\n        case ALL_MASSAGE:{            \r\n            return action.content\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Reducer","import React from 'react';\nimport {Provider} from \"react-redux\"\nimport {createStore} from \"redux\"\nimport {BrowserRouter, Switch, Route, Redirect} from \"react-router-dom\"\nimport Auth from './component/auth/auth';\nimport Chat from './component/chat/chat';\nimport Reducer from './redux/reducer/reducer';\n\n\nconst store = createStore(Reducer)\n\nfunction App() {\n  return (\n    <div className=\"App\">       \n      <Provider store={store}>\n        <BrowserRouter>          \n          <Switch>\n            <Route  path=\"/auth\" component={Auth}></Route>\n            <Route path=\"/chat\" component={Chat}></Route>\n          </Switch>\n          <Redirect from=\"/\" to=\"/auth\"></Redirect>\n        </BrowserRouter>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}